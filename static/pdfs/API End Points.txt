/add_customer - POST
input : password,firstname,lastname,address,pincode,username,email

/add_professional - POST
input : almost same as above with exp and compname

/check - POST 
input : username , password 


Initially , give every seller isactive = 0 , until admin approves document.

also do cross check if add professional is working or not
also always refer to service as task



Core Functionalities

You can either use Flask security (session or token) or JWT based Token based authentication to implement role-based access control
The app must have a suitable model to store and differentiate all the types of users of the app.


2. Admin Dashboard - for the Admin


Admin login redirects to admin dashboard
Admin will manage all the users (customers/service professional)
Admin will approve a service professional after verification of profile docs
Admin will block customer/service professional based on fraudulent activity/poor reviews

3. Service Management - for the Admin


Create a new service with a base price.
Update an existing service - e.g. name, price, time_required and/or other fields
Delete an existing service

4. Service Request - for the customers


Create a new service request based on the services available
Edit an existing service request - e.g. date_of_request, completion status, remarks etc
Close an existing service request.

5. Search for available services


The customers should be able to search for available services based on their location, name, pin code etc.
The admin should be able to search for a professional to block/unblock/review them.

6. Take action on a particular service request - for the service professional


Ability to view all the service requests from all the customers
Ability to accept/reject a particular service request
Ability to close the service request once completed*
7. Backend Jobs

a. Scheduled Job - Daily reminders - The application should send daily reminders to service professionals on g-chat using Google Chat Webhooks or SMS or mail

Check if a professional has not visited/has pending service request
If yes, then send the alert asking them to visit/accept/reject the service request
The reminder can be sent in the evening, every day (students can choose the time)
b. Scheduled Job - Monthly Activity Report - Devise a monthly report for the customer created using HTML and sent via mail.

The activity report can include service details, how many services were requested/closed etc.
For the monthly report to be sent, start a job on the first day of every month → create a report using the above parameters → send it as an email
c. User Triggered Async Job - Export as CSV - Devise a CSV format details for the service requests closed by the professional


This export is meant to download the service details (service_id, customer_id, professional_id, date_of_request, remarks etc.)
Have a dashboard from where the admin can trigger the export
This should trigger a batch job, and send an alert once done
8. Performance and Caching


Add caching where required to increase the performance
Add cache expiry
API Performance